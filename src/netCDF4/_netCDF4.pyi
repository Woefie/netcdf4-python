from typing import *
class Dataset:
    ...

    def __init__(self, filename, mode='r', clobber=True, format='NETCDF4',
                 diskless=False, persist=False, keepweakref=False,
                 memory=None, encoding=None, parallel=False,
                 comm=None, info=None, **kwargs): ...

    def filepath(self, encoding=None) -> None: ...
    def isopen(self) -> None: ...
    def close(self) -> bool: ...
    def sync(self) -> None: ...
    def set_fill_on(self) -> None: ...
    def set_fill_off(self) -> None: ...
    def createDimension(self, dimname, size=None) -> Dimension: ...
    def renameDimension(self, oldname, newname) -> None: ...
    def createCompoundType(self, datatype, datatype_name) -> CompoundType: ...
    def createVLType(self, datatype, datatype_name) -> VLType: ...

    def createEnumType(self, datatype, datatype_name,
                       enum_dict) -> EnumType: ...

    def createVariable(self, varname, datatype, dimensions=(),
                       compression=None, zlib=False,
                       complevel=4, shuffle=True,
                       szip_coding='nn', szip_pixels_per_block=8,
                       blosc_shuffle=1, fletcher32=False, contiguous=False,
                       chunksizes=None, endian='native', least_significant_digit=None,
                       significant_digits=None, quantize_mode='BitGroom', fill_value=None, chunk_cache=None) -> Variable: ...

    def renameVariable(self, oldname, newname) -> None: ...
    def createGroup(self, groupname) ->Group: ...
    def ncattrs(self)-> list[str]: ...
    def setncattr(self, name, value): ...
    def setncattr_string(self, name, value): ...
    def setncatts(self, attdict): ...
    def getncattr(self, name, encoding='utf-8'): ...
    def delncattr(self, name): ...
    def renameAttribute(self, oldname, newname): ...
    def renameGroup(self, oldname, newname): ...
    def set_auto_chartostring(self, value): ...
    def set_auto_maskandscale(self, value): ...
    def set_auto_mask(self, value): ...
    def set_auto_scale(self, value): ...
    def set_always_mask(self, value): ...
    def set_ncstring_attrs(self, value): ...
    def get_variables_by_attributes(self, **kwargs): ...
    def fromcdl(cdlfilename, ncfilename=None, mode='a', format='NETCDF4'): ...
    def tocdl(self, coordvars=False, data=False, outfile=None): ...
    def has_blosc_filter(self): ...
    def has_zstd_filter(self): ...
    def has_bzip2_filter(self): ...
    def has_szip_filter(self): ...

    def __setattr__(self, name, value): ...
    def __getattr__(self, name): ...
    def __delattr__(self, name): ...
    def __enter__(self) -> Dataset: ...
    def __exit__(self, atype, value, traceback) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...


class Group(Dataset):
    ...
    def __init__(self, parent, name, **kwargs): ...
    def close(self): ...


class Dimension:
    ...
    def __init__(self, grp, name, size=None, **kwargs): ...

    name: ...
    size: ...
    def group(self): ...
    def isunlimited(self): ...

    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...


class Variable:
    def __init__(self, grp, name, datatype, dimensions=(),
                 compression=None, zlib=False,
                 complevel=4, shuffle=True, szip_coding='nn', szip_pixels_per_block=8,
                 blosc_shuffle=1,
                 fletcher32=False, contiguous=False,
                 chunksizes=None, endian='native', least_significant_digit=None,
                 significant_digits=None, quantize_mode='BitGroom', fill_value=None, chunk_cache=None, **kwargs): ...

    def group(self): ...
    def ncattrs(self): ...
    def setncattr(self, name, value): ...
    def setncattr_string(self, name, value): ...
    def setncatts(self, attdict): ...
    def getncattr(self, name, encoding='utf-8'): ...
    def delncattr(self, name): ...
    def filters(self): ...
    def quantization(self): ...
    def endian(self): ...
    def chunking(self): ...
    def get_var_chunk_cache(self): ...
    def set_var_chunk_cache(self, size=None, nelems=None, preemption=None): ...
    def renameAttribute(self, oldname, newname): ...
    def assignValue(self, val): ...
    def getValue(self): ...
    def set_auto_chartostring(self, chartostring): ...
    def use_nc_get_vars(self, use_nc_get_vars): ...
    def set_auto_maskandscale(self, maskandscale): ...
    def set_auto_scale(self, scale): ...
    def set_auto_mask(self, mask): ...
    def set_always_mask(self, always_mask): ...
    def set_ncstring_attrs(self, ncstring_attrs): ...
    def set_collective(self, value): ...
    def get_dims(self): ...

    def __setitem__(self, elem, data): ...
    def __len__(self): ...
    def __array__(self): ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __delattr__(self, name): ...
    def __setattr__(self, name, value): ...
    def __getattr__(self, name): ...
    def __getitem__(self, elem): ...


class CompoundType:
    ...
    def __init__(self, grp, datatype, dtype_name, **kwargs): ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __reduce__(self): ...


class VLType:
    ...
    def __init__(self, grp, datatype, dtype_name, **kwargs): ...

    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __reduce__(self): ...


class EnumType:
    ...
    def __init__(self, grp, datatype, dtype_name, enum_dict, **kwargs): ...

    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __reduce__(self): ...


def stringtoarr(string, NUMCHARS, dtype='S'): ...
def stringtochar(a, encoding='utf-8'): ...
def chartostring(b, encoding='utf-8'): ...


class MFDataset(Dataset):
    ...
    def __init__(self, files, check=False, aggdim=None, exclude=[],
                 master_file=None): ...

    def __setattr__(self, name, value): ...
    def __getattribute__(self, name): ...
    def ncattrs(self): ...
    def close(self): ...
    def isopen(self): ...
    def __repr__(self) -> str: ...
    def __reduce__(self): ...


class _Variable:
    ...


class MFTime(_Variable):
    ...
    def __init__(self, time, units=None, calendar=None): ...
    def __getitem__(self, elem): ...
