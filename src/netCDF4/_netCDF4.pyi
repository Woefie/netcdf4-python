from typing import TypeAlias, Literal, Optional, Any
import numpy as np
import os

Datatype: TypeAlias = Literal['S1', 'c', 'i1', 'b', 'B', 'u1', 'i2',
                              'h', 's', 'u2', 'i4', 'i', 'l', 'u4', 'i8', 'u8', 'f4', 'f', 'f8', 'd']
Compression: TypeAlias = Literal['zlib', 'szip', 'zstd', 'blosc_lz',
                                 'blosc_lz4', 'blosc_lz4hc', 'blosc_zlib', 'blosc_zstd']
AccessMode: TypeAlias = Literal['r', 'w',
                                'r+', 'a', 'x', 'rs', 'ws', 'r+s', 'as']
Format: TypeAlias = Literal['NETCDF4', 'NETCDF4_CLASSIC', 'NETCDF3_CLASSIC',
                            'NETCDF3_64BIT_OFFSET', 'NETCDF3_64BIT_DATA']


class Dataset:
    ...

    def __init__(
        self,
        filename: str | os.PathLike,
        mode: AccessMode = 'r',
        clobber: bool = True,
        format: Format = 'NETCDF4',
        diskless: bool = False,
        persist: bool = False,
        keepweakref: bool = False,
        memory: Optional[Literal['r', 'w']] = None,
        encoding: Optional[str] = None,
        parallel: bool = False,
        comm=None,
        info=None,
        **kwargs
    ): ...

    def filepath(self, encoding: str = None) -> None: ...
    def isopen(self) -> None: ...
    def close(self) -> bool: ...
    def sync(self) -> None: ...
    def set_fill_on(self) -> None: ...
    def set_fill_off(self) -> None: ...

    def createDimension(
        self,
        dimname: str,
        size: int = None
    ) -> Dimension: ...

    def renameDimension(
        self,
        oldname: str,
        newname: str
    ) -> None: ...

    def createCompoundType(
        self,
        datatype: np.dtype[np.number],
        datatype_name: str
    ) -> CompoundType: ...

    def createVLType(
        self,
        datatype: np.dtype[np.number],
        datatype_name: str
    ) -> VLType: ...

    def createEnumType(
        self,
        datatype: np.dtype[np.number],
        datatype_name: str,
        enum_dict: dict[str:int]
    ) -> EnumType: ...

    def createVariable(
        self,
        varname: str,
        datatype: Datatype | np.dtype | str | CompoundType | VLType,
        dimensions: tuple(str) = (),
        compression: Compression = None,
        zlib: bool = False,
        complevel: Optional[Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]] = 4,
        shuffle: bool = True,
        szip_coding: Literal['nn', 'ec'] = 'nn',
        szip_pixels_per_block: Literal[4, 8, 16, 32] = 8,
        blosc_shuffle: Literal[0, 1, 2] = 1,
        fletcher32: bool = False,
        contiguous: bool = False,
        chunksizes: Optional[int] = None,
        endian: Literal['native', 'little', 'big'] = 'native',
        least_significant_digit: Optional[int] = None,
        significant_digits: Optional[int] = None,
        quantize_mode: Literal['BitGroom', 'BitRound',
                               'GranularBitRound'] = 'BitGroom',
        fill_value: Optional[bool] = None,
        chunk_cache: Optional[int] = None
    ) -> Variable: ...

    def renameVariable(self, oldname: str, newname: str) -> None: ...
    def createGroup(self, groupname: str) -> Group: ...
    def ncattrs(self) -> list[str]: ...
    def setncattr_string(self, name: str, value) -> None: ...
    def setncattr(self, name: str, value) -> None: ...
    def setncatts(self, attdict) -> None: ...
    def getncattr(self, name: str, encoding='utf-8') -> Dataset | Group: ...
    def delncattr(self, name: str) -> None: ...
    def renameAttribute(self, oldname: str, newname: str) -> None: ...
    def renameGroup(self, oldname: str, newname: str) -> None: ...
    def set_auto_chartostring(self, value) -> None: ...
    def set_auto_maskandscale(self, value) -> None: ...
    def set_auto_mask(self, value) -> None: ...
    def set_auto_scale(self, value) -> None: ...
    def set_always_mask(self, value) -> None: ...
    def set_ncstring_attrs(self, value) -> None: ...
    def get_variables_by_attributes(self, **kwargs) -> list[Variable]: ...

    @property
    def name(self) -> str: ...

    @staticmethod
    def fromcdl(
        cdlfilename: str,
        ncfilename: Optional[str] = None,
        mode: AccessMode = 'a',
        format: Format = 'NETCDF4'
    ) -> Dataset: ...

    def tocdl(
        self,
        coordvars: bool = False,
        data: bool = False,
        outfile: str = None
    ) -> None | bool: ...

    def has_blosc_filter(self) -> bool: ...
    def has_zstd_filter(self) -> bool: ...
    def has_bzip2_filter(self) -> bool: ...
    def has_szip_filter(self) -> bool: ...

    def __setattr__(self, name: str, value): ...
    def __getattr__(self, name: str): ...
    def __delattr__(self, name: str): ...
    def __enter__(self) -> Dataset: ...
    def __exit__(self, atype, value, traceback) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...


class Group(Dataset):
    ...

    def __init__(
        self,
        parent: Group | Dataset,
        name: str,
        **kwargs
    ): ...
    def close(self) -> bool: ...


class Dimension:
    ...

    def __init__(
        self,
        grp: Group,
        name: str,
        size: Optional[int] = None,
        **kwargs
    ): ...
    @property
    def name(self) -> str: ...
    @property
    def size(self) -> int: ...
    def group(self) -> Group: ...
    def isunlimited(self) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...


class Variable:
    def __init__(
        self,
        grp: Group,
        name: str,
        datatype: Datatype | np.dtype | str | CompoundType | VLType,
        dimensions: tuple(str) = (),
        compression: Compression = None,
        zlib: bool = False,
        complevel: Optional[Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]] = 4,
        shuffle: bool = True,
        szip_coding: Literal['nn', 'ec'] = 'nn',
        szip_pixels_per_block: Literal[4, 8, 16, 32] = 8,
        blosc_shuffle: Literal[0, 1, 2] = 1,
        fletcher32: bool = False,
        contiguous: bool = False,
        chunksizes: Optional[int] = None,
        endian: Literal['native', 'little', 'big'] = 'native',
        least_significant_digit: Optional[int] = None,
        significant_digits: Optional[int] = None,
        quantize_mode: Literal['BitGroom', 'BitRound',
                               'GranularBitRound'] = 'BitGroom',
        fill_value: Optional[bool] = None,
        chunk_cache: Optional[int] = None,
        **kwargs
    ): ...

    def group(self) -> Group: ...
    def ncattrs(self) -> list[str]: ...
    def setncattr(self, name: str, value) -> None: ...
    def setncattr_string(self, name: str, value) -> None: ...
    def setncatts(self, attdict) -> None: ...
    def getncattr(self, name: str, encoding='utf-8'): ...
    def delncattr(self, name: str) -> None: ...
    def filters(self) -> dict: ...
    def quantization(self): ...
    def endian(self) -> str: ...
    def chunking(self) -> str | list[int]: ...
    def get_var_chunk_cache(self) -> tuple(int, int, float): ...

    def set_var_chunk_cache(
        self,
        size: int = None,
        nelems: int = None,
        preemption: float = None
    ) -> None: ...

    def renameAttribute(self, oldname: str, newname: str) -> None: ...
    def assignValue(self, val) -> None: ...
    def getValue(self) -> Any: ...
    def set_auto_chartostring(self, chartostring) -> None: ...
    def use_nc_get_vars(self, use_nc_get_vars) -> None: ...
    def set_auto_maskandscale(self, maskandscale) -> None: ...
    def set_auto_scale(self, scale) -> None: ...
    def set_auto_mask(self, mask) -> None: ...
    def set_always_mask(self, always_mask) -> None: ...
    def set_ncstring_attrs(self, ncstring_attrs) -> None: ...
    def set_collective(self, value) -> None: ...
    def get_dims(self) -> tuple[Dimension]: ...

    @property
    def name(self) -> str: ...
    @property
    def datatype(self) -> CompoundType | VLType | EnumType: ...
    @property
    def shape(self) -> tuple[int]: ...
    @property
    def size(self) -> int: ...
    @property
    def dimensions(self) -> tuple[Dimension]: ...

    def __setitem__(self, elem, data): ...
    def __len__(self) -> int: ...
    def __array__(self) -> np.array: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __delattr__(self, name: str): ...
    def __setattr__(self, name: str, value): ...
    def __getattr__(self, name: str): ...
    def __getitem__(self, elem): ...


class CompoundType:
    ...
    def __init__(self, grp, datatype, dtype_name, **kwargs): ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __reduce__(self): ...


class VLType:
    ...

    def __init__(
        self,
        grp: Group,
        datatype: np.dtype,
        dtype_name: str,
        **kwargs
    ): ...

    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __reduce__(self): ...


class EnumType:
    ...

    def __init__(
        self,
        grp: Group,
        datatype: np.dtype,
        dtype_name: str,
        enum_dict: dict[str:int],
        **kwargs
    ): ...

    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __reduce__(self): ...


def stringtoarr(string, NUMCHARS, dtype='S'): ...
def stringtochar(a, encoding='utf-8'): ...
def chartostring(b, encoding='utf-8'): ...


class MFDataset(Dataset):
    ...

    def __init__(
        self,
        files: str | os.PathLike,
        check: bool = False,
        aggdim: Optional[str] = None,
        exclude: list[str] = [],
        master_file: str | os.PathLike = None
    ): ...

    def __setattr__(self, name: str, value: Any): ...
    def __getattribute__(self, name: str): ...
    def ncattrs(self): ...
    def close(self): ...
    def isopen(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __reduce__(self): ...


class _Variable:
    ...
    def __init__(self, dset, varname, var, recdimname): ...
    def __getattr__(self, name): ...
    def __repr__(self): ...
    def __len__(self): ...
    def __getitem__(self, elem): ...

    def typecode(self): ...
    def ncattrs(self): ...
    def _shape(self): ...
    def set_auto_chartostring(self, val): ...
    def set_auto_maskandscale(self, val): ...
    def set_auto_mask(self, val): ...
    def set_auto_scale(self, val): ...
    def set_always_mask(self, val): ...


class MFTime(_Variable):
    ...

    def __init__(
        self,
        time,
        units=None,
        calendar: Literal['standard', 'gregorian'] = None
    ): ...
    def __getitem__(self, elem): ...
